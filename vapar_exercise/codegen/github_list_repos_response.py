# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2024-01-08T06:13:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field


class Owner(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(
        ..., examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: Optional[str] = Field(
        ..., examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/followers"]
    )
    following_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/following{/other_user}"]
    )
    gists_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"]
    )
    starred_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/starred{/owner}{/repo}"]
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/orgs"]
    )
    repos_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/repos"]
    )
    events_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/events{/privacy}"]
    )
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: Optional[str] = Field(None, examples=['"2020-07-09T00:17:55Z"'])


class Permissions(BaseModel):
    admin: Optional[bool] = None
    maintain: Optional[bool] = None
    push: Optional[bool] = None
    triage: Optional[bool] = None
    pull: Optional[bool] = None


class CodeOfConduct(BaseModel):
    key: str = Field(..., examples=["contributor_covenant"])
    name: str = Field(..., examples=["Contributor Covenant"])
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/codes_of_conduct/contributor_covenant"]
    )
    body: Optional[str] = Field(
        None,
        examples=[
            "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n"
        ],
    )
    html_url: Optional[AnyUrl]


class License(BaseModel):
    key: Optional[str] = None
    name: Optional[str] = None
    spdx_id: Optional[str] = None
    url: Optional[str] = None
    node_id: Optional[str] = None


class Status(Enum):
    enabled = "enabled"
    disabled = "disabled"


class AdvancedSecurity(BaseModel):
    status: Optional[Status] = None


class DependabotSecurityUpdates(BaseModel):
    status: Optional[Status] = Field(
        None,
        description="The enablement status of Dependabot security updates for the repository.",
    )


class SecretScanning(BaseModel):
    status: Optional[Status] = None


class SecretScanningPushProtection(BaseModel):
    status: Optional[Status] = None


class SecurityAndAnalysis(BaseModel):
    advanced_security: Optional[AdvancedSecurity] = None
    dependabot_security_updates: Optional[DependabotSecurityUpdates] = Field(
        None,
        description="Enable or disable Dependabot security updates for the repository.",
    )
    secret_scanning: Optional[SecretScanning] = None
    secret_scanning_push_protection: Optional[SecretScanningPushProtection] = None


class ModelItem(BaseModel):
    id: int = Field(..., examples=[1296269])
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(..., examples=["Hello-World"])
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    owner: Owner = Field(..., description="A GitHub user.", title="Simple User")
    private: bool
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat/Hello-World"])
    description: Optional[str] = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World"]
    )
    archive_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
        ],
    )
    assignees_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/assignees{/user}"],
    )
    blobs_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"],
    )
    branches_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/branches{/branch}"],
    )
    collaborators_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
        ],
    )
    comments_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/comments{/number}"],
    )
    commits_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"]
    )
    compare_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
        ],
    )
    contents_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/contents/{+path}"],
    )
    contributors_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/contributors"]
    )
    deployments_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/deployments"]
    )
    downloads_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/downloads"]
    )
    events_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/events"]
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"],
    )
    git_refs_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"]
    )
    git_tags_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"]
    )
    git_url: Optional[str] = None
    issue_comment_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
        ],
    )
    issues_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/issues{/number}"],
    )
    keys_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"]
    )
    labels_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/labels{/name}"]
    )
    languages_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/languages"]
    )
    merges_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/merges"]
    )
    milestones_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
        ],
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/pulls{/number}"]
    )
    releases_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/releases{/id}"]
    )
    ssh_url: Optional[str] = None
    stargazers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/stargazers"]
    )
    statuses_url: str = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"]
    )
    subscribers_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscribers"]
    )
    subscription_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/subscription"]
    )
    tags_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"]
    )
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"],
    )
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = Field(
        None,
        description="The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
    )
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    has_discussions: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[datetime] = Field(None, examples=["2011-01-26T19:06:43Z"])
    created_at: Optional[datetime] = Field(None, examples=["2011-01-26T19:01:12Z"])
    updated_at: Optional[datetime] = Field(None, examples=["2011-01-26T19:14:43Z"])
    permissions: Optional[Permissions] = None
    role_name: Optional[str] = Field(None, examples=["admin"])
    temp_clone_token: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    code_of_conduct: Optional[CodeOfConduct] = Field(
        None, description="Code Of Conduct", title="Code Of Conduct"
    )
    license: Optional[License] = None
    forks: Optional[int] = Field(None, examples=[0])
    open_issues: Optional[int] = Field(None, examples=[0])
    watchers: Optional[int] = Field(None, examples=[0])
    allow_forking: Optional[bool] = None
    web_commit_signoff_required: Optional[bool] = Field(None, examples=[False])
    security_and_analysis: Optional[SecurityAndAnalysis] = None


# class Model(BaseModel):
#     __root__: List[ModelItem]
